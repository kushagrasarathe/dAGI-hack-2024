{
  "address": "0x2f1a46fB128F76a1196d4d60ea6665403901cf9E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUnlockV12",
          "name": "_unlockContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockSubscriptionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rewardCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "actualCategory",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "name": "agentRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "threadID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "agentSubscriptionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentVersionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "agentVersionID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "agentVersionRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agentVersions",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOpenForContributions",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "extendSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_threadID",
          "type": "string"
        }
      ],
      "name": "purchaseSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "agentName",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "agentID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionExpirationDuration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "keyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basisPoint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "lockName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lockSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseTokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rewardCategory",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "actualCategory",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isOpenForContributions",
              "type": "bool"
            }
          ],
          "internalType": "struct ChainAgents.AgentInitConfig",
          "name": "agentConfig",
          "type": "tuple"
        }
      ],
      "name": "registerAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_agentVersionID",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_agentVersionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_agentMetadataCID",
          "type": "string"
        }
      ],
      "name": "registerAgentVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_agentID",
          "type": "uint32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7a020c56b2b4bbd9cab1369c7a85bbf2daf263bd16b1eb48a87a472e053f9697",
  "receipt": {
    "to": null,
    "from": "0x898d0DBd5850e086E6C09D2c83A26Bb5F1ff8C33",
    "contractAddress": "0x2f1a46fB128F76a1196d4d60ea6665403901cf9E",
    "transactionIndex": 6,
    "gasUsed": "1590974",
    "logsBloom": "0x
    "blockHash": "0x994f93df3cbe73af5910640f5c7a0d1d17be97dfed4690ce6ad6fae267e8edd8",
    "transactionHash": "0x7a020c56b2b4bbd9cab1369c7a85bbf2daf263bd16b1eb48a87a472e053f9697",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 12290592,
        "transactionHash": "0x7a020c56b2b4bbd9cab1369c7a85bbf2daf263bd16b1eb48a87a472e053f9697",
        "address": "0x2f1a46fB128F76a1196d4d60ea6665403901cf9E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000898d0dbd5850e086e6c09d2c83a26bb5f1ff8c33"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x994f93df3cbe73af5910640f5c7a0d1d17be97dfed4690ce6ad6fae267e8edd8"
      }
    ],
    "blockNumber": 12290592,
    "cumulativeGasUsed": "2142249",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x36b34e10295cCE69B652eEB5a8046041074515Da"
  ],
  "numDeployments": 1,
  "solcInputHash": "06bffe58c0679f8a967c84c3845497b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUnlockV12\",\"name\":\"_unlockContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockSubscriptionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"name\":\"agentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"threadID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"agentSubscriptionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentVersionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"agentVersionID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentMetadataCID\",\"type\":\"string\"}],\"name\":\"agentVersionRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agentVersions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"extendSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_threadID\",\"type\":\"string\"}],\"name\":\"purchaseSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionExpirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lockName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actualCategory\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isOpenForContributions\",\"type\":\"bool\"}],\"internalType\":\"struct ChainAgents.AgentInitConfig\",\"name\":\"agentConfig\",\"type\":\"tuple\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_agentVersionID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_agentVersionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_agentMetadataCID\",\"type\":\"string\"}],\"name\":\"registerAgentVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_agentID\",\"type\":\"uint32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_unlockContract\":\"The address of the Chainlink oracle Automation Forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseSubscription(uint32,uint256,string)\":{\"details\":\"PurchaseSubscription function for an agentID\",\"params\":{\"_agentID\":\"to subscribe\",\"_value\":\"array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint32)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_agentID\":\"to withdraw money from the lock contract\"}}},\"title\":\"RocketAI (Decentralized Artificial Intelligence Marketplace)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the contract\"},\"withdraw(uint32)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"notice\":\"@dev\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainAgents.sol\":\"ChainAgents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/ChainAgents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// import { Base64 } from \\\"./library/Base64.sol\\\";\\n\\n/**\\n * @title RocketAI (Decentralized Artificial Intelligence Marketplace)\\n * @notice\\n * @dev\\n */\\ncontract ChainAgents is Ownable {\\n    IUnlockV12 unlockContract;\\n\\n    struct AgentStruct {\\n        address creator;\\n        address lockAddress;\\n        bool isOpenForContributions;\\n    }\\n\\n    uint256 max = type(uint).max;\\n\\n    uint256 month = 31 days;\\n\\n    // Mapping from agentID to agentStruct\\n    mapping(uint32 => AgentStruct) public agents;\\n\\n    // Mapping from agentID to agentVersionID\\n    mapping(uint32 => uint32) public agentVersions;\\n\\n    struct AgentInitConfig {\\n        string agentName; //  assistant Id\\n        uint32 agentID; // assistant id of the assitant model into uint32\\n        uint subscriptionExpirationDuration; // Take from Creator\\n        address tokenAddress; // native for now\\n        uint keyPrice; // amount for the Sub\\n        uint basisPoint; // referre fee i.e. 100point == 1%\\n        string lockName; // `Subscription of AssistantName`\\n        string lockSymbol; // SOA``\\n        string baseTokenURI;\\n        string rewardCategory; // Category\\n        string actualCategory; // Category\\n        bool isOpenForContributions; // check to make it open For Contributions\\n    }\\n\\n    event agentRegistered(\\n        string agentName,\\n        string baseTokenURI,\\n        uint32 agentID,\\n        address creator,\\n        address unlockSubscriptionContract,\\n        uint keyPrice,\\n        uint basisPoint,\\n        string rewardCategory,\\n        string actualCategory,\\n        bool isOpenForContributions\\n    );\\n\\n    event agentVersionRegistered(\\n        uint32 agentID,\\n        string agentVersionName,\\n        uint32 agentVersionID,\\n        address creator,\\n        string agentMetadataCID\\n    );\\n\\n    event agentSubscriptionPurchased(\\n        uint32 agentID,\\n        uint256 tokenId,\\n        string threadID,\\n        address agentCreator,\\n        address subscriber\\n    );\\n\\n    /// @notice Initializes the contract\\n    /// @param _unlockContract The address of the Chainlink oracle Automation Forwarder\\n    constructor(IUnlockV12 _unlockContract) {\\n        unlockContract = _unlockContract;\\n    }\\n\\n    function registerAgent(AgentInitConfig calldata agentConfig) external {\\n        require(\\n            agents[agentConfig.agentID].creator == address(0),\\n            \\\"agent already exists\\\"\\n        );\\n\\n        address newLockAddress = unlockContract.createLock(\\n            // Expiration duration of subscription\\n            month,\\n            agentConfig.tokenAddress,\\n            agentConfig.keyPrice,\\n            max,\\n            agentConfig.lockName,\\n            bytes12(0)\\n        );\\n        IPublicLockV12(newLockAddress).setLockMetadata(\\n            agentConfig.lockName,\\n            agentConfig.lockSymbol,\\n            agentConfig.baseTokenURI\\n        );\\n        if (agentConfig.basisPoint > 0)\\n            IPublicLockV12(newLockAddress).setReferrerFee(\\n                address(0),\\n                agentConfig.basisPoint\\n            );\\n        IPublicLockV12(newLockAddress).setEventHooks(\\n            // onKeyPurchase hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            // tokenURI hook\\n            // address(this),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n        IPublicLockV12(newLockAddress).updateLockConfig(month, max, max);\\n        agents[agentConfig.agentID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: newLockAddress,\\n            isOpenForContributions: agentConfig.isOpenForContributions\\n        });\\n\\n        emit agentRegistered(\\n            agentConfig.agentName,\\n            agentConfig.baseTokenURI,\\n            agentConfig.agentID,\\n            msg.sender,\\n            newLockAddress,\\n            agentConfig.keyPrice,\\n            agentConfig.basisPoint,\\n            agentConfig.rewardCategory,\\n            agentConfig.actualCategory,\\n            agentConfig.isOpenForContributions\\n        );\\n    }\\n\\n    function registerAgentVersion(\\n        uint32 _agentID,\\n        uint32 _agentVersionID,\\n        string memory _agentVersionName,\\n        string memory _agentMetadataCID\\n    ) external {\\n        require(\\n            agents[_agentID].isOpenForContributions,\\n            \\\"agent is not open for contributions\\\"\\n        );\\n\\n        require(\\n            agents[_agentVersionID].creator == address(0),\\n            \\\"agent already exists\\\"\\n        );\\n\\n        // Check Subscription plan\\n        agents[_agentVersionID] = AgentStruct({\\n            creator: msg.sender,\\n            lockAddress: agents[_agentID].lockAddress,\\n            isOpenForContributions: false\\n        });\\n\\n        emit agentVersionRegistered(\\n            _agentID,\\n            _agentVersionName,\\n            _agentVersionID,\\n            msg.sender,\\n            _agentMetadataCID\\n        );\\n\\n        agentVersions[_agentVersionID] = _agentID;\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _agentID to subscribe\\n     * @param _value array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n     */\\n    function purchaseSubscription(\\n        uint32 _agentID,\\n        uint256 _value,\\n        string memory _threadID\\n    ) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n        uint256[] memory tokenID = new uint256[](1);\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        // If the agent that we want to subscribe is a subVersion then\\n        // Pay the main agentID and give a referre fee to the contributor\\n        // Of this new agent Version. Referre fee is defined in the registerAgent function.\\n        if (!agents[_agentID].isOpenForContributions) {\\n            address referrer = agents[_agentID].creator;\\n            _referrers[0] = referrer;\\n        }\\n        _values[0] = _value;\\n        _recipients[0] = msg.sender;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n\\n            tokenID = IPublicLockV12(agentLockAddress).purchase(\\n                _values,\\n                _recipients,\\n                _referrers,\\n                _keyManagers,\\n                _data\\n            );\\n        } else {\\n            tokenID = IPublicLockV12(agentLockAddress).purchase{\\n                value: msg.value\\n            }(_values, _recipients, _referrers, _keyManagers, _data);\\n        }\\n\\n        emit agentSubscriptionPurchased(\\n            _agentID,\\n            tokenID[0],\\n            _threadID,\\n            agents[_agentID].creator,\\n            msg.sender\\n        );\\n    }\\n\\n    function extendSubscription(\\n        uint256 _value,\\n        uint256 _tokenId,\\n        uint32 _agentID\\n    ) external payable {\\n        require(\\n            agents[_agentID].creator != address(0),\\n            \\\"agent does not exists\\\"\\n        );\\n\\n        bytes memory _data;\\n        address _referrer;\\n        address agentLockAddress = agents[_agentID].lockAddress;\\n        address tokenAddress = IPublicLockV12(agentLockAddress).tokenAddress();\\n        uint _priceToPay = IPublicLockV12(agentLockAddress).keyPrice();\\n\\n        if (!agents[_agentID].isOpenForContributions) {\\n            _referrer = agents[_agentID].creator;\\n        }\\n\\n        if (tokenAddress != address(0)) {\\n            IERC20(tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _priceToPay\\n            );\\n            IPublicLockV12(agentLockAddress).extend(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        } else {\\n            IPublicLockV12(agentLockAddress).extend{value: msg.value}(\\n                _value,\\n                _tokenId,\\n                _referrer,\\n                _data\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _agentID to withdraw money from the lock contract\\n     */\\n    function withdraw(uint32 _agentID) external {\\n        AgentStruct memory _agent = agents[_agentID];\\n        IPublicLockV12 AgentLockContract = IPublicLockV12(_agent.lockAddress);\\n        uint balance = address(_agent.lockAddress).balance;\\n        uint amountToTransfer = (balance / 10) * 7;\\n        address tokenAddress = AgentLockContract.tokenAddress();\\n        AgentLockContract.withdraw(\\n            tokenAddress,\\n            payable(address(this)),\\n            balance\\n        );\\n        address payable withdrawer = payable(_agent.creator);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, amountToTransfer);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, amountToTransfer);\\n        }\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw(address tokenAddress) external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n        // IF Payment token is in Ethers\\n        if (tokenAddress == address(0)) {\\n            // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n            Address.sendValue(withdrawer, address(this).balance);\\n        } else {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transfer(withdrawer, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    // Unlock Protocol custom hooks\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view {\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(\\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice) {\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n}\\n\",\"keccak256\":\"0xbbbc2fa228c074df4f1974ef5014596f732580f8999dfb0e0f8eac9c302ee9a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100b457601f611ae838819003918201601f19168301916001600160401b038311848410176100b9578084926020946040528339810103126100b457516001600160a01b0390818116908190036100b45760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36000196002556228de806003556001541617600155611a1890816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163221c1fd1146112ee5750806351cff8d914611225578063584992de146111ed5780635e895f291461118b57806362e16bd314610f9e578063715018a614610f4457806381bb425014610b595780638da5cb5b14610b32578063a9cf7519146108ec578063aa9224cd1461072f578063ba30621e146106d5578063e9239117146101825763f2fde38b0361000f573461017f57602036600319011261017f576100ce61139e565b6100d6611507565b6001600160a01b0390811690811561012b57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b503461017f57602036600319011261017f576001600160401b036004351161017f576101806004353603600319011261017f5763ffffffff6101c860246004350161155f565b168152600460205260408120546101e8906001600160a01b031615611570565b6001546003546001600160a01b0391821691600435606401359190821682036106d15761027592602092856002549361022b60c4600435016004356004016115b3565b97906040519889978896879563216c908360e11b8752600487015260018060a01b03166024860152608460043501356044860152606485015260c0608485015260c4840191611604565b8260a483015203925af19081156105fe5782916106a2575b50816102a360c4600435016004356004016115b3565b906102b860e4600435016004356004016115b3565b9190926102d0610104600435016004356004016115b3565b94906001600160a01b0388163b1561069e5761031295610324610336938997604051998a98899863d1b8759b60e01b8a52606060048b015260648a0191611604565b87810360031901602489015291611604565b84810360031901604486015291611604565b0381836001600160a01b0388165af180156105fe5761068a575b505060a46004350135610621575b6001600160a01b0381163b156105fa57816040516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e4818360018060a01b0388165af180156105fe5761060d575b506003546002546001600160a01b0384163b156106095760405163282478df60e01b815260048101929092526024820181905260448201528181606481836001600160a01b0388165af180156105fe576105e6575b5050600435610164019061042a82611625565b6040519061043782611425565b3382526001600160a01b0383166020830190815290151560408301908152909161046560246004350161155f565b63ffffffff1686526004602081905260408720915182546001600160a01b039182166001600160a01b0319909116178355935160019092018054935160ff60a01b90151560a01b16929094166001600160a81b031990931692909217179091556104d290803501806115b3565b91909260043561010401600435600401906104ec916115b3565b926104fb60246004350161155f565b61050e60048035610124810191016115b3565b909261052360048035610144810191016115b3565b95909661052f90611625565b976040519a8b9a610140808d528c019061054892611604565b908a820360208c015261055a92611604565b63ffffffff90931660408901523360608901526001600160a01b0316608088015260846004359081013560a089015260a4013560c088015286820360e08801526105a392611604565b908482036101008601526105b692611604565b901515610120830152037f60959c5b991214a9f145caa42f648174a46bd41e2f7f92d206d2b2d07e8e26f591a180f35b6105ef90611456565b6105fa578138610417565b5080fd5b6040513d84823e3d90fd5b8280fd5b61061690611456565b6105fa5781386103c2565b6001600160a01b0381163b156105fa5760405163debe2b0d60e01b815260048082018490523560a40135602482015282908181604481836001600160a01b0388165af180156105fe57610676575b505061035e565b61067f90611456565b6105fa57813861066f565b61069390611456565b6105fa578138610350565b8680fd5b6106c4915060203d6020116106ca575b6106bc8183611484565b8101906115e5565b3861028d565b503d6106b2565b8380fd5b503461017f57602036600319011261017f57604060609163ffffffff6106f9611412565b16815260046020522060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b503461017f576020806003193601126105fa5763ffffffff61074f611412565b16825260048152604082206040519161076783611425565b6001808060a01b039283815416855201549160ff81841693848487015260a01c1615156040850152823193600a8504936007850294808604600714901517156108d8576040516313aedd4b60e31b81528791908581600481855afa9081156108985783916108bb575b50813b15610609578460648492836040519586948593636ce5768960e11b8552169c8d600485015230602485015260448401525af180156105fe576108a3575b505051169280610828575050610825916118e2565b80f35b60405163a9059cbb60e01b81526001600160a01b0390941660048501526024840192909252919082908290818681604481015b03925af180156108985761086e57505080f35b8161088d92903d10610891575b6108858183611484565b810190611868565b5080f35b503d61087b565b6040513d85823e3d90fd5b6108ac90611456565b6108b7578538610810565b8580fd5b6108d29150863d88116106ca576106bc8183611484565b386107d0565b634e487b7160e01b87526011600452602487fd5b50606036600319011261017f57806004356024359060443563ffffffff8116809103610b2d578084526004602090815260408520546001600160a01b0391906109389083161515611672565b85928087526004825282600160408920015416926040516313aedd4b60e31b81528381600481885afa908115610b22578991610b05575b506040516310e5697360e01b8152928484600481895afa938415610afa578a94610ac7575b508952600484526040892060ff600182015460a01c1615610abc575b5016908115610a70576040516323b872dd60e01b81523360048201523060248201526044810191909152908290829060649082908b905af18015610a6557610a47575b5050803b15610a4357610a20938580946040519687958694859363d813cc1960e01b855260048501611880565b03925af180156105fe57610a3357505080f35b610a3c90611456565b61017f5780f35b8480fd5b81610a5d92903d10610891576108858183611484565b5038806109f3565b6040513d89823e3d90fd5b50505090919392813b156106d157610a9f946040519586948593849363d813cc1960e01b855260048501611880565b039134905af180156105fe57610ab3575080f35b61082590611456565b5482169550386109b0565b9093508481813d8311610af3575b610adf8183611484565b81010312610aef57519238610994565b8980fd5b503d610ad5565b6040513d8c823e3d90fd5b610b1c9150843d86116106ca576106bc8183611484565b3861096f565b6040513d8b823e3d90fd5b505050fd5b503461017f578060031936011261017f57546040516001600160a01b039091168152602090f35b50606036600319011261017f57610b6e611412565b906044356001600160401b0381116105fa57610b8e9036906004016114c0565b63ffffffff8316825260046020526040822054610bb5906001600160a01b03161515611672565b60405192610bc284611469565b6001908185526020368187013760405194610bdc86611469565b8286526020368188013760405192610bf384611469565b8084526020368186013760405196610c0a88611469565b818852602036818a013760405197610c2189611469565b828952875b60208110610f335750908888949392604051610c4181611469565b848152602036818301375063ffffffff87168652600460205260408620938401549360ff8560a01c1615610f19575b50602435610c7d826116b6565b5233610c88846116b6565b526040516313aedd4b60e31b8152916020836004816001600160a01b0389165afa928315610a65578793610ef8575b506040516310e5697360e01b8152926020846004816001600160a01b038a165afa908115610eed5788948592610eb2575b506001600160a01b0316908115610e3e576040516323b872dd60e01b815233600482015230602482015260448101919091529360209185916064918391905af1908115610a65578793610d5892610e1f575b50604051633381899760e01b8152998a978896879560048701611791565b03926001600160a01b03165af1928315610e1457610de0610da77fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd19563ffffffff958891610df2575b506116b6565b51918484168752600460205260018060a01b0360408820541692604051958695168552602085015260a0604085015260a0840190611632565b9060608301523360808301520390a180f35b610e0e91503d808a833e610e068183611484565b8101906116d9565b88610da1565b6040513d86823e3d90fd5b610e379060203d602011610891576108858183611484565b508c610d3a565b5050604051633381899760e01b81529889968795869550610e629460048701611791565b039134906001600160a01b03165af1928315610e1457610de0610da77fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd19563ffffffff958891610df257506116b6565b945090506020843d602011610ee5575b81610ecf60209383611484565b81010312610ee157879351908d610ce8565b8780fd5b3d9150610ec2565b6040513d8a823e3d90fd5b610f1291935060203d6020116106ca576106bc8183611484565b918b610cb7565b546001600160a01b0316610f2c866116b6565b528a610c70565b806060602080938d01015201610c26565b503461017f578060031936011261017f57610f5d611507565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461017f57608036600319011261017f57610fb8611412565b6024359063ffffffff918281168091036106d1576001600160401b03926044358481116108b757610fed9036906004016114c0565b936064359081116108b7576110069036906004016114c0565b9216928385526020926004845260ff600160408820015460a01c161561113a5761110683926111207f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a352093600597968a5260048752898660018060a01b036110738160408520541615611570565b8b835260048a5260018a826040818482892001541696600482519461109786611425565b338652808601998a5283860198838a52835252209151166bffffffffffffffffffffffff60a01b8254161781550192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b16171790556040519384938a855260a08986015260a0850190611632565b908660408501523360608501528382036080850152611632565b0390a1845252604082209063ffffffff1982541617905580f35b60405162461bcd60e51b815260048101859052602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b503461017f5760e036600319011261017f576111a56113b9565b6111ad6113cf565b506001600160a01b0360643581811603610609576084356001600160401b0381116106d1576111e09036906004016113e5565b50503091160361017f5780f35b503461017f57602036600319011261017f57602090604063ffffffff9182611213611412565b16815260058452205416604051908152f35b503461017f576020806003193601126105fa578161124161139e565b611249611507565b6001600160a01b0316806112645750505061082547336118e2565b6040516370a0823160e01b8152306004820152908382602481845afa801561089857849284916112bb575b5060405163a9059cbb60e01b81523360048201526024810191909152928391908290816044810161085b565b8381939492503d83116112e7575b6112d38183611484565b81010312610609575183919061085b61128f565b503d6112c9565b9050346105fa5760803660031901126105fa5761130961139e565b506113126113b9565b5061131b6113cf565b506064356001600160401b0381116106095761133b9036906004016113e5565b50506310e5697360e01b8152602081600481335afa9081156105fe578291611369575b602082604051908152f35b90506020813d8211611396575b8161138360209383611484565b810103126105fa5760209150513861135e565b3d9150611376565b600435906001600160a01b03821682036113b457565b600080fd5b602435906001600160a01b03821682036113b457565b604435906001600160a01b03821682036113b457565b9181601f840112156113b4578235916001600160401b0383116113b457602083818601950101116113b457565b6004359063ffffffff821682036113b457565b606081019081106001600160401b0382111761144057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161144057604052565b604081019081106001600160401b0382111761144057604052565b90601f801991011681019081106001600160401b0382111761144057604052565b6001600160401b03811161144057601f01601f191660200190565b81601f820112156113b4578035906114d7826114a5565b926114e56040519485611484565b828452602083830101116113b457816000926020809301838601378301015290565b6000546001600160a01b0316330361151b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b3563ffffffff811681036113b45790565b1561157757565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b903590601e19813603018212156113b457018035906001600160401b0382116113b4576020019181360383136113b457565b908160209103126113b457516001600160a01b03811681036113b45790565b908060209392818452848401376000828201840152601f01601f1916010190565b3580151581036113b45790565b919082519283825260005b84811061165e575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161163d565b1561167957565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b8051156116c35760200190565b634e487b7160e01b600052603260045260246000fd5b9060209081838203126113b45782516001600160401b03938482116113b4570181601f820112156113b4578051938411611440578360051b906040519461172285840187611484565b855283808601928201019283116113b4578301905b828210611745575050505090565b81518152908301908301611737565b90815180825260208080930193019160005b828110611774575050505090565b83516001600160a01b031685529381019392810192600101611766565b939192909260a085019060a08652845180925260c086019160208096019060005b878282106118545750505050916117d7826117f39594886117e59503888a0152611754565b908682036040880152611754565b908482036060860152611754565b9160808184039101528251908183528083019281808460051b8301019501936000915b8483106118265750505050505090565b9091929394958480611844600193601f198682030187528a51611632565b9801930193019194939290611816565b8351865294850194909201916001016117b2565b908160209103126113b4575180151581036113b45790565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b8281106118d057505060a09293506000838284010152601f8019910116010190565b8181015184820160a0015285016118ae565b81471061199d576000918291829182916001600160a01b03165af13d15611998573d61190d816114a5565b9061191b6040519283611484565b8152600060203d92013e5b1561192d57565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b611926565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea2646970667358221220d48073e1deb1e36e7752d40a2ae8fd44ec156658c65ef95c65fc3f877c692d8a64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163221c1fd1146112ee5750806351cff8d914611225578063584992de146111ed5780635e895f291461118b57806362e16bd314610f9e578063715018a614610f4457806381bb425014610b595780638da5cb5b14610b32578063a9cf7519146108ec578063aa9224cd1461072f578063ba30621e146106d5578063e9239117146101825763f2fde38b0361000f573461017f57602036600319011261017f576100ce61139e565b6100d6611507565b6001600160a01b0390811690811561012b57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b503461017f57602036600319011261017f576001600160401b036004351161017f576101806004353603600319011261017f5763ffffffff6101c860246004350161155f565b168152600460205260408120546101e8906001600160a01b031615611570565b6001546003546001600160a01b0391821691600435606401359190821682036106d15761027592602092856002549361022b60c4600435016004356004016115b3565b97906040519889978896879563216c908360e11b8752600487015260018060a01b03166024860152608460043501356044860152606485015260c0608485015260c4840191611604565b8260a483015203925af19081156105fe5782916106a2575b50816102a360c4600435016004356004016115b3565b906102b860e4600435016004356004016115b3565b9190926102d0610104600435016004356004016115b3565b94906001600160a01b0388163b1561069e5761031295610324610336938997604051998a98899863d1b8759b60e01b8a52606060048b015260648a0191611604565b87810360031901602489015291611604565b84810360031901604486015291611604565b0381836001600160a01b0388165af180156105fe5761068a575b505060a46004350135610621575b6001600160a01b0381163b156105fa57816040516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e4818360018060a01b0388165af180156105fe5761060d575b506003546002546001600160a01b0384163b156106095760405163282478df60e01b815260048101929092526024820181905260448201528181606481836001600160a01b0388165af180156105fe576105e6575b5050600435610164019061042a82611625565b6040519061043782611425565b3382526001600160a01b0383166020830190815290151560408301908152909161046560246004350161155f565b63ffffffff1686526004602081905260408720915182546001600160a01b039182166001600160a01b0319909116178355935160019092018054935160ff60a01b90151560a01b16929094166001600160a81b031990931692909217179091556104d290803501806115b3565b91909260043561010401600435600401906104ec916115b3565b926104fb60246004350161155f565b61050e60048035610124810191016115b3565b909261052360048035610144810191016115b3565b95909661052f90611625565b976040519a8b9a610140808d528c019061054892611604565b908a820360208c015261055a92611604565b63ffffffff90931660408901523360608901526001600160a01b0316608088015260846004359081013560a089015260a4013560c088015286820360e08801526105a392611604565b908482036101008601526105b692611604565b901515610120830152037f60959c5b991214a9f145caa42f648174a46bd41e2f7f92d206d2b2d07e8e26f591a180f35b6105ef90611456565b6105fa578138610417565b5080fd5b6040513d84823e3d90fd5b8280fd5b61061690611456565b6105fa5781386103c2565b6001600160a01b0381163b156105fa5760405163debe2b0d60e01b815260048082018490523560a40135602482015282908181604481836001600160a01b0388165af180156105fe57610676575b505061035e565b61067f90611456565b6105fa57813861066f565b61069390611456565b6105fa578138610350565b8680fd5b6106c4915060203d6020116106ca575b6106bc8183611484565b8101906115e5565b3861028d565b503d6106b2565b8380fd5b503461017f57602036600319011261017f57604060609163ffffffff6106f9611412565b16815260046020522060ff60018060a01b03600181845416930154906040519384528116602084015260a01c1615156040820152f35b503461017f576020806003193601126105fa5763ffffffff61074f611412565b16825260048152604082206040519161076783611425565b6001808060a01b039283815416855201549160ff81841693848487015260a01c1615156040850152823193600a8504936007850294808604600714901517156108d8576040516313aedd4b60e31b81528791908581600481855afa9081156108985783916108bb575b50813b15610609578460648492836040519586948593636ce5768960e11b8552169c8d600485015230602485015260448401525af180156105fe576108a3575b505051169280610828575050610825916118e2565b80f35b60405163a9059cbb60e01b81526001600160a01b0390941660048501526024840192909252919082908290818681604481015b03925af180156108985761086e57505080f35b8161088d92903d10610891575b6108858183611484565b810190611868565b5080f35b503d61087b565b6040513d85823e3d90fd5b6108ac90611456565b6108b7578538610810565b8580fd5b6108d29150863d88116106ca576106bc8183611484565b386107d0565b634e487b7160e01b87526011600452602487fd5b50606036600319011261017f57806004356024359060443563ffffffff8116809103610b2d578084526004602090815260408520546001600160a01b0391906109389083161515611672565b85928087526004825282600160408920015416926040516313aedd4b60e31b81528381600481885afa908115610b22578991610b05575b506040516310e5697360e01b8152928484600481895afa938415610afa578a94610ac7575b508952600484526040892060ff600182015460a01c1615610abc575b5016908115610a70576040516323b872dd60e01b81523360048201523060248201526044810191909152908290829060649082908b905af18015610a6557610a47575b5050803b15610a4357610a20938580946040519687958694859363d813cc1960e01b855260048501611880565b03925af180156105fe57610a3357505080f35b610a3c90611456565b61017f5780f35b8480fd5b81610a5d92903d10610891576108858183611484565b5038806109f3565b6040513d89823e3d90fd5b50505090919392813b156106d157610a9f946040519586948593849363d813cc1960e01b855260048501611880565b039134905af180156105fe57610ab3575080f35b61082590611456565b5482169550386109b0565b9093508481813d8311610af3575b610adf8183611484565b81010312610aef57519238610994565b8980fd5b503d610ad5565b6040513d8c823e3d90fd5b610b1c9150843d86116106ca576106bc8183611484565b3861096f565b6040513d8b823e3d90fd5b505050fd5b503461017f578060031936011261017f57546040516001600160a01b039091168152602090f35b50606036600319011261017f57610b6e611412565b906044356001600160401b0381116105fa57610b8e9036906004016114c0565b63ffffffff8316825260046020526040822054610bb5906001600160a01b03161515611672565b60405192610bc284611469565b6001908185526020368187013760405194610bdc86611469565b8286526020368188013760405192610bf384611469565b8084526020368186013760405196610c0a88611469565b818852602036818a013760405197610c2189611469565b828952875b60208110610f335750908888949392604051610c4181611469565b848152602036818301375063ffffffff87168652600460205260408620938401549360ff8560a01c1615610f19575b50602435610c7d826116b6565b5233610c88846116b6565b526040516313aedd4b60e31b8152916020836004816001600160a01b0389165afa928315610a65578793610ef8575b506040516310e5697360e01b8152926020846004816001600160a01b038a165afa908115610eed5788948592610eb2575b506001600160a01b0316908115610e3e576040516323b872dd60e01b815233600482015230602482015260448101919091529360209185916064918391905af1908115610a65578793610d5892610e1f575b50604051633381899760e01b8152998a978896879560048701611791565b03926001600160a01b03165af1928315610e1457610de0610da77fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd19563ffffffff958891610df2575b506116b6565b51918484168752600460205260018060a01b0360408820541692604051958695168552602085015260a0604085015260a0840190611632565b9060608301523360808301520390a180f35b610e0e91503d808a833e610e068183611484565b8101906116d9565b88610da1565b6040513d86823e3d90fd5b610e379060203d602011610891576108858183611484565b508c610d3a565b5050604051633381899760e01b81529889968795869550610e629460048701611791565b039134906001600160a01b03165af1928315610e1457610de0610da77fb13fba94df0630efb53e320abed1d27b8117a85ac9090a9e5cc3edd534b22bd19563ffffffff958891610df257506116b6565b945090506020843d602011610ee5575b81610ecf60209383611484565b81010312610ee157879351908d610ce8565b8780fd5b3d9150610ec2565b6040513d8a823e3d90fd5b610f1291935060203d6020116106ca576106bc8183611484565b918b610cb7565b546001600160a01b0316610f2c866116b6565b528a610c70565b806060602080938d01015201610c26565b503461017f578060031936011261017f57610f5d611507565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461017f57608036600319011261017f57610fb8611412565b6024359063ffffffff918281168091036106d1576001600160401b03926044358481116108b757610fed9036906004016114c0565b936064359081116108b7576110069036906004016114c0565b9216928385526020926004845260ff600160408820015460a01c161561113a5761110683926111207f57bff0a79faaabef73281bdf7021d3758548f9c97bfc303a2be1a4c6406a352093600597968a5260048752898660018060a01b036110738160408520541615611570565b8b835260048a5260018a826040818482892001541696600482519461109786611425565b338652808601998a5283860198838a52835252209151166bffffffffffffffffffffffff60a01b8254161781550192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b16171790556040519384938a855260a08986015260a0850190611632565b908660408501523360608501528382036080850152611632565b0390a1845252604082209063ffffffff1982541617905580f35b60405162461bcd60e51b815260048101859052602360248201527f6167656e74206973206e6f74206f70656e20666f7220636f6e747269627574696044820152626f6e7360e81b6064820152608490fd5b503461017f5760e036600319011261017f576111a56113b9565b6111ad6113cf565b506001600160a01b0360643581811603610609576084356001600160401b0381116106d1576111e09036906004016113e5565b50503091160361017f5780f35b503461017f57602036600319011261017f57602090604063ffffffff9182611213611412565b16815260058452205416604051908152f35b503461017f576020806003193601126105fa578161124161139e565b611249611507565b6001600160a01b0316806112645750505061082547336118e2565b6040516370a0823160e01b8152306004820152908382602481845afa801561089857849284916112bb575b5060405163a9059cbb60e01b81523360048201526024810191909152928391908290816044810161085b565b8381939492503d83116112e7575b6112d38183611484565b81010312610609575183919061085b61128f565b503d6112c9565b9050346105fa5760803660031901126105fa5761130961139e565b506113126113b9565b5061131b6113cf565b506064356001600160401b0381116106095761133b9036906004016113e5565b50506310e5697360e01b8152602081600481335afa9081156105fe578291611369575b602082604051908152f35b90506020813d8211611396575b8161138360209383611484565b810103126105fa5760209150513861135e565b3d9150611376565b600435906001600160a01b03821682036113b457565b600080fd5b602435906001600160a01b03821682036113b457565b604435906001600160a01b03821682036113b457565b9181601f840112156113b4578235916001600160401b0383116113b457602083818601950101116113b457565b6004359063ffffffff821682036113b457565b606081019081106001600160401b0382111761144057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161144057604052565b604081019081106001600160401b0382111761144057604052565b90601f801991011681019081106001600160401b0382111761144057604052565b6001600160401b03811161144057601f01601f191660200190565b81601f820112156113b4578035906114d7826114a5565b926114e56040519485611484565b828452602083830101116113b457816000926020809301838601378301015290565b6000546001600160a01b0316330361151b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b3563ffffffff811681036113b45790565b1561157757565b60405162461bcd60e51b81526020600482015260146024820152736167656e7420616c72656164792065786973747360601b6044820152606490fd5b903590601e19813603018212156113b457018035906001600160401b0382116113b4576020019181360383136113b457565b908160209103126113b457516001600160a01b03811681036113b45790565b908060209392818452848401376000828201840152601f01601f1916010190565b3580151581036113b45790565b919082519283825260005b84811061165e575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161163d565b1561167957565b60405162461bcd60e51b81526020600482015260156024820152746167656e7420646f6573206e6f742065786973747360581b6044820152606490fd5b8051156116c35760200190565b634e487b7160e01b600052603260045260246000fd5b9060209081838203126113b45782516001600160401b03938482116113b4570181601f820112156113b4578051938411611440578360051b906040519461172285840187611484565b855283808601928201019283116113b4578301905b828210611745575050505090565b81518152908301908301611737565b90815180825260208080930193019160005b828110611774575050505090565b83516001600160a01b031685529381019392810192600101611766565b939192909260a085019060a08652845180925260c086019160208096019060005b878282106118545750505050916117d7826117f39594886117e59503888a0152611754565b908682036040880152611754565b908482036060860152611754565b9160808184039101528251908183528083019281808460051b8301019501936000915b8483106118265750505050505090565b9091929394958480611844600193601f198682030187528a51611632565b9801930193019194939290611816565b8351865294850194909201916001016117b2565b908160209103126113b4575180151581036113b45790565b9193929082526020938483015260018060a01b03166040820152608080606083015260605190818184015260005b8281106118d057505060a09293506000838284010152601f8019910116010190565b8181015184820160a0015285016118ae565b81471061199d576000918291829182916001600160a01b03165af13d15611998573d61190d816114a5565b9061191b6040519283611484565b8152600060203d92013e5b1561192d57565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b611926565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea2646970667358221220d48073e1deb1e36e7752d40a2ae8fd44ec156658c65ef95c65fc3f877c692d8a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_unlockContract": "The address of the Chainlink oracle Automation Forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseSubscription(uint32,uint256,string)": {
        "details": "PurchaseSubscription function for an agentID",
        "params": {
          "_agentID": "to subscribe",
          "_value": "array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint32)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_agentID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "RocketAI (Decentralized Artificial Intelligence Marketplace)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the contract"
      },
      "withdraw(uint32)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "notice": "@dev",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2743,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "unlockContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUnlockV12)2725"
      },
      {
        "astId": 2757,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "max",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2760,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "month",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2765,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "agents",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_struct(AgentStruct)2750_storage)"
      },
      {
        "astId": 2769,
        "contract": "contracts/ChainAgents.sol:ChainAgents",
        "label": "agentVersions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUnlockV12)2725": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_struct(AgentStruct)2750_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ChainAgents.AgentStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentStruct)2750_storage"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(AgentStruct)2750_storage": {
        "encoding": "inplace",
        "label": "struct ChainAgents.AgentStruct",
        "members": [
          {
            "astId": 2745,
            "contract": "contracts/ChainAgents.sol:ChainAgents",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2747,
            "contract": "contracts/ChainAgents.sol:ChainAgents",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2749,
            "contract": "contracts/ChainAgents.sol:ChainAgents",
            "label": "isOpenForContributions",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}